Quick Start
===========

Welcome to Plurals, a powerful package for multi-agent, persona-based, pluralistic AI deliberation. This guide will walk you through the main components of Plurals: Agents, Structures, Moderators, and how to inspect output.

Installation
------------

Install Plurals with pip:

.. code-block:: bash

   pip install plurals

Setting Up
----------

First, let's import the necessary modules and set up our API keys:

.. code-block:: python

   from plurals.agent import Agent
   from plurals.deliberation import Chain, Ensemble, Debate, Graph, Moderator
   import os

   # Set your API keys as environment variables
   os.environ["OPENAI_API_KEY"] = 'your_openai_key_here'
   os.environ["ANTHROPIC_API_KEY"] = 'your_anthropic_key_here'

1. Agents
---------

Agents are the core component of Plurals. They can be created and configured in various ways to suit different needs. Here are the main approaches to creating and using Agents:

Default API Call (No System Instructions)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you don't pass any system instructions, the Agent will use the default API call:

.. code-block:: python

   default_agent = Agent(model='gpt-4o', task="Explain the concept of democracy.")
   response = default_agent.process()
   print(response)

This approach uses the model's default behavior without any specific persona or instructions.

Custom System Instructions
~~~~~~~~~~~~~~~~~~~~~~~~~~

You can pass custom system instructions to define specific behavior:

.. code-block:: python

   custom_agent = Agent(
       system_instructions="You are a helpful assistant with expertise in climate science.",
       model='gpt-4o',
       task="Discuss the impacts of rising sea levels."
   )
   response = custom_agent.process()
   print(response)

This method allows you to define a specific role or set of instructions for the Agent.

Persona and Persona Templates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Agents can be created using a combination of a persona and a persona template. The system instructions are generated by combining these two elements:

.. code-block:: python

   agent = Agent(
       persona="a climate scientist with 20 years of experience",
       persona_template="default",
       model='gpt-4o',
       task="Explain the greenhouse effect."
   )
   print(agent.system_instructions)
   response = agent.process()
   print(response)

Pre-defined Persona Templates
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Plurals offers several pre-defined persona templates:

1. **default**: A standard template for general use.
2. **empathetic**: Encourages more emotional and narrative-based responses.
3. **rational**: Focuses on logical and fact-based responses.

Example using the empathetic template:

.. code-block:: python

   empathetic_agent = Agent(
       persona="a social worker",
       persona_template="empathetic",
       model='gpt-4o',
       task="Discuss the challenges faced by homeless individuals."
   )

Creating Custom Persona Templates
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can create your own persona templates by defining a string with a `${persona}` placeholder:

.. code-block:: python

   custom_template = """
   You are ${persona}. Always speak in short, concise sentences.
   Use simple language that a 10-year-old could understand.
   """

   simple_agent = Agent(
       persona="an astrophysicist",
       persona_template=custom_template,
       model='gpt-4o',
       task="Explain black holes."
   )

ANES-based Nationally Representative Personas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Plurals allows the creation of nationally-representative personas using American National Election Studies (ANES) 2024 data. These personas are generated using sampling weights to ensure they reflect the U.S. population accurately.

Random ANES Persona
^^^^^^^^^^^^^^^^^^^

To select a random persona from the ANES dataset:

.. code-block:: python

   random_anes_agent = Agent(
       persona='random',
       model='gpt-4o',
       task="Share your views on healthcare reform."
   )
   print("Random ANES Persona:", random_anes_agent.persona)

Searching ANES for Specific Personas
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can search the ANES dataset for personas meeting specific criteria:

Using the 'ideology' parameter:

.. code-block:: python

   conservative_agent = Agent(
       ideology="conservative",
       model='gpt-4o',
       task="Discuss your views on tax policy."
   )
   print("Conservative ANES Persona:", conservative_agent.persona)

Supported values for 'ideology' are: 'very liberal', 'liberal', 'moderate', 'conservative', and 'very conservative'.

Using a custom query string:

.. code-block:: python

   custom_anes_agent = Agent(
       query_str="inputstate=='Texas' & age > 65",
       model='gpt-4o',
       task="Share your thoughts on retirement policies."
   )
   print("Custom ANES Persona:", custom_anes_agent.persona)

This approach allows for more specific filtering of the ANES dataset based on various demographic and ideological factors.

2. Structures
-------------

Structures in Plurals allow for complex interactions between multiple agents.

Chain Structure
~~~~~~~~~~~~~~~

Create a chain of agents where each agent builds upon the previous agent's response:

.. code-block:: python

   agents = [
       Agent(persona='an optimistic futurist', model='gpt-4o'),
       Agent(persona='a cautious ethicist', model='gpt-4o'),
       Agent(persona='a pragmatic engineer', model='gpt-4o')
   ]

   chain = Chain(
       agents,
       task="Discuss the potential impacts of advanced AI on society.",
       combination_instructions="chain"
   )
   chain.process()
   print(chain.final_response)

Ensemble Structure
~~~~~~~~~~~~~~~~~~

Create an ensemble of agents that process tasks in parallel:

.. code-block:: python

   ensemble_agents = [Agent(persona='random', model='gpt-4o') for _ in range(5)]
   ensemble = Ensemble(
       ensemble_agents,
       task="Propose solutions to urban transportation issues."
   )
   ensemble.process()
   print(ensemble.responses)

Debate Structure
~~~~~~~~~~~~~~~~

Set up a debate between two agents:

.. code-block:: python

   pro_agent = Agent(persona="advocate for universal basic income", model='gpt-4o')
   con_agent = Agent(persona="critic of universal basic income", model='gpt-4o')

   debate = Debate(
       [pro_agent, con_agent],
       task="Debate the merits of implementing universal basic income.",
       combination_instructions="debate"
   )
   debate.process()
   print(debate.responses)

Graph Structure
~~~~~~~~~~~~~~~

Create a Directed Acyclic Graph (DAG) structure for more complex agent interactions:

.. code-block:: python

   agents = [
       Agent(persona="AI researcher"),
       Agent(persona="Ethicist"),
       Agent(persona="Policymaker"),
       Agent(persona="Public communicator")
   ]

   edges = [(0, 1), (0, 2), (1, 2), (1, 3), (2, 3)]

   graph = Graph(
       agents=agents,
       edges=edges,
       task="Develop guidelines for responsible AI development and deployment."
   )
   result = graph.process()
   print(result)

3. Moderators
-------------

Moderators can oversee and synthesize the outputs of other agents.

Basic Moderator
~~~~~~~~~~~~~~~

Create a basic moderator to synthesize agent responses:

.. code-block:: python

   moderator = Moderator(
       persona='You are a neutral facilitator',
       model='gpt-4o',
       combination_instructions="default"
   )

   moderated_chain = Chain(agents, task="Discuss climate change solutions", moderator=moderator)
   moderated_chain.process()
   print(moderated_chain.final_response)

Auto-Moderator
~~~~~~~~~~~~~~

Create an auto-moderator that generates its own instructions based on the task:

.. code-block:: python

   auto_mod = Moderator(system_instructions='auto', model='gpt-4o')

   auto_mod_ensemble = Ensemble(
       ensemble_agents,
       task="Brainstorm innovative education techniques",
       moderator=auto_mod
   )
   auto_mod_ensemble.process()
   print(auto_mod_ensemble.final_response)

Combination Instructions
~~~~~~~~~~~~~~~~~~~~~~~~

Combination instructions determine how agents or moderators combine previous responses with the current task. There are several ways to set combination instructions:

1. Using pre-defined templates:

.. code-block:: python

   chain_with_template = Chain(
       agents,
       task="Discuss the future of work",
       combination_instructions="chain"
   )

Available templates include "default", "chain", "debate", and "voting".

2. Custom combination instructions:

.. code-block:: python

   custom_instructions = """
   INSTRUCTIONS
   Analyze the previous responses: ${previous_responses}
   Identify common themes and unique insights.
   Synthesize these into a comprehensive view, highlighting areas of consensus and disagreement.
   """

   custom_chain = Chain(
       agents,
       task="Explore the ethical implications of AI in healthcare",
       combination_instructions=custom_instructions
   )

3. Setting combination instructions for individual agents:

.. code-block:: python

   agent_with_instructions = Agent(
       persona="A critical thinker",
       model='gpt-4o',
       combination_instructions="Critically analyze previous responses before providing your own perspective."
   )

4. Inspecting Output
--------------------

Plurals provides various ways to inspect the output and inner workings of agents and structures.

Inspecting Agent Output
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   inspection_agent = Agent(ideology="liberal", model='gpt-4o', task="Comment on income inequality.")
   inspection_agent.process()

   print("Agent Info:")
   print(inspection_agent.info)

   print("\nAgent History:")
   print(inspection_agent.history)

   print("\nAgent Responses:")
   print(inspection_agent.responses)

Inspecting Structure Output
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   inspection_chain = Chain(agents, task="Discuss the future of work")
   inspection_chain.process()

   print("Structure Info:")
   print(inspection_chain.info)

   print("\nStructure Responses:")
   print(inspection_chain.responses)

   print("\nFinal Response:")
   print(inspection_chain.final_response)

These examples demonstrate the power and flexibility of Plurals in creating diverse, multi-agent AI interactions. Experiment with different combinations of agents, structures, and moderators to explore the full potential of pluralistic AI deliberation!